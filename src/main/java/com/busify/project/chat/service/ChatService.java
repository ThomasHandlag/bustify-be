package com.busify.project.chat.service;

import com.busify.project.chat.dto.ChatMessageDTO;
import com.busify.project.chat.dto.ChatNotificationDTO;
import com.busify.project.chat.dto.ChatSessionDTO;
import com.busify.project.chat.event.RoomCreatedEvent;
import com.busify.project.chat.model.ChatMessage;
import com.busify.project.chat.repository.ChatMessageRepository;
import com.busify.project.common.utils.JwtUtils;
import com.busify.project.user.entity.Profile;
import com.busify.project.user.repository.ProfileRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class ChatService {

    private final ChatMessageRepository chatMessageRepository;
    private final ProfileRepository profileRepository;
    private final JwtUtils jwtUtil;
    private final ApplicationEventPublisher eventPublisher;
    private final SimpMessagingTemplate messagingTemplate; // Th√™m dependency n√†y
    private final ChatAssignmentService chatAssignmentService;

    public ChatMessage saveMessage(ChatMessageDTO chatMessageDTO, String roomId) {
        System.out.println("üí¨ Saving message from: " + chatMessageDTO.getSender() + " - Room: " + roomId);
        
        // Check if this is the first message in the room
        boolean isFirstMessage = chatMessageRepository.findByRoomIdOrderByTimestampAsc(roomId).isEmpty();

        // Th√™m m·ªôt kho·∫£ng tr·ªÖ nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o tin nh·∫Øn n√†y ƒë∆∞·ª£c l∆∞u tr∆∞·ªõc
        // b·∫•t k·ª≥ tin nh·∫Øn t·ª± ƒë·ªông n√†o ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi s·ª± ki·ªán.
        if (isFirstMessage) {
            try {
                Thread.sleep(10); // 10ms delay
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        // T·ª± ƒë·ªông set recipient n·∫øu ch∆∞a c√≥ v√† kh√¥ng ph·∫£i tin nh·∫Øn SYSTEM_ASSIGN
        String recipient = chatMessageDTO.getRecipient();
        if (recipient == null && chatMessageDTO.getType() == ChatMessageDTO.MessageType.CHAT) {
            System.out.println("üîç Tin nh·∫Øn ch∆∞a c√≥ recipient, t√¨m ƒë·ªëi t∆∞·ª£ng nh·∫≠n...");
            
            // T√¨m customer_service ƒë√£ ƒë∆∞·ª£c assign cho room n√†y
            Optional<String> assignedAgent = chatAssignmentService.getAssignedAgentForRoom(roomId);
            if (assignedAgent.isPresent()) {
                String agentEmail = assignedAgent.get();
                
                // Ki·ªÉm tra xem ng∆∞·ªùi g·ª≠i l√† customer hay customer_service
                if (chatMessageDTO.getSender().equals(agentEmail)) {
                    // Ng∆∞·ªùi g·ª≠i l√† customer_service, t√¨m customer trong room
                    System.out.println("üë®‚Äçüíº Ng∆∞·ªùi g·ª≠i l√† customer_service, t√¨m customer trong room...");
                    List<String> otherUsers = chatMessageRepository.findOtherUsersInRoom(roomId, agentEmail);
                    if (!otherUsers.isEmpty()) {
                        recipient = otherUsers.get(0); // L·∫•y customer ƒë·∫ßu ti√™n
                        System.out.println("‚úÖ Set recipient l√† customer: " + recipient);
                    }
                } else {
                    // Ng∆∞·ªùi g·ª≠i l√† customer, recipient l√† customer_service
                    recipient = agentEmail;
                    System.out.println("‚úÖ Set recipient l√† customer_service: " + recipient);
                }
            } else {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y agent n√†o ƒë√£ assign cho room");
                
                // N·∫øu kh√¥ng c√≥ agent ƒë∆∞·ª£c assign v√† ƒë√¢y kh√¥ng ph·∫£i tin nh·∫Øn ƒë·∫ßu ti√™n, 
                // th·ª≠ assign ngay l·∫≠p t·ª©c
                if (!isFirstMessage) {
                    System.out.println("üöÄ Th·ª≠ assign agent ngay cho room hi·ªán t·∫°i...");
                    Optional<ChatMessage> assignmentResult = chatAssignmentService.assignChatToAvailableAgent(roomId, chatMessageDTO.getSender());
                    if (assignmentResult.isPresent()) {
                        System.out.println("‚úÖ ƒê√£ assign agent th√†nh c√¥ng, t√¨m l·∫°i recipient...");
                        Optional<String> newAssignedAgent = chatAssignmentService.getAssignedAgentForRoom(roomId);
                        if (newAssignedAgent.isPresent()) {
                            recipient = newAssignedAgent.get();
                            System.out.println("‚úÖ Set recipient sau khi assign: " + recipient);
                        }
                    } else {
                        System.out.println("‚ùå Kh√¥ng th·ªÉ assign agent cho room");
                    }
                }
            }
        }

        // Save the message
        ChatMessage message = ChatMessage.builder()
                .content(chatMessageDTO.getContent())
                .sender(chatMessageDTO.getSender())
                .recipient(recipient) // S·ª≠ d·ª•ng recipient ƒë√£ ƒë∆∞·ª£c set t·ª± ƒë·ªông
                .type(chatMessageDTO.getType())
                .roomId(roomId) // S·∫Ω l√† null n·∫øu l√† chat 1-1
                .timestamp(LocalDateTime.now())
                .build();
        ChatMessage savedMessage = chatMessageRepository.save(message);
        
        System.out.println("üíæ Saved message - ID: " + savedMessage.getId() + 
                          " - Sender: " + savedMessage.getSender() + 
                          " - Recipient: " + savedMessage.getRecipient());

        // Sau khi l∆∞u tin nh·∫Øn, g·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh ri√™ng c·ªßa ng∆∞·ªùi nh·∫≠n
        sendNotificationToRecipients(savedMessage, roomId);

        // If this is the first message, publish the room created event
        if (isFirstMessage) {
            eventPublisher.publishEvent(new RoomCreatedEvent(this, roomId, chatMessageDTO.getSender()));
        }

        return savedMessage;
    }

    /**
     * L∆∞u tin nh·∫Øn AI v·ªõi x·ª≠ l√Ω ƒë·∫∑c bi·ªát
     */
    public ChatMessage saveAIMessage(ChatMessageDTO chatMessageDTO, String roomId) {
        ChatMessage message = ChatMessage.builder()
                .content(chatMessageDTO.getContent())
                .sender(chatMessageDTO.getSender())
                .recipient(chatMessageDTO.getRecipient())
                .type(chatMessageDTO.getType())
                .roomId(roomId)
                .timestamp(LocalDateTime.now())
                .build();
        
        ChatMessage savedMessage = chatMessageRepository.save(message);
        
        // Kh√¥ng g·ª≠i th√¥ng b√°o cho tin nh·∫Øn AI ƒë·ªÉ tr√°nh spam
        // AI chat th∆∞·ªùng l√† 1-1 v√† kh√¥ng c·∫ßn th√¥ng b√°o
        
        return savedMessage;
    }

    /**
     * L·∫•y l·ªãch s·ª≠ chat AI c·ªßa m·ªôt user
     */
    public List<ChatMessage> getAIChatHistory(String userEmail) {
        String roomId = "ai-" + userEmail;
        return chatMessageRepository.findByRoomIdOrderByTimestampAsc(roomId);
    }

    /**
     * Ki·ªÉm tra xem user c√≥ l·ªãch s·ª≠ chat v·ªõi AI kh√¥ng
     */
    public boolean hasAIChatHistory(String userEmail) {
        String roomId = "ai-" + userEmail;
        List<ChatMessage> history = chatMessageRepository.findByRoomIdOrderByTimestampAsc(roomId);
        return !history.isEmpty();
    }

    public ChatMessage saveAutomaticMessage(ChatMessageDTO chatMessageDTO, String roomId) {
        ChatMessage message = ChatMessage.builder()
                .content(chatMessageDTO.getContent())
                .sender(chatMessageDTO.getSender())
                .recipient(chatMessageDTO.getRecipient())
                .type(chatMessageDTO.getType())
                .roomId(roomId)
                .timestamp(LocalDateTime.now())
                .build();
        return chatMessageRepository.save(message);
    }

    public List<ChatMessage> getChatHistoryByRoom(String roomId) {
        return chatMessageRepository.findByRoomIdOrderByTimestampAsc(roomId);
    }

    public List<ChatMessage> getPrivateChatHistory(String user1, String user2) {
        return chatMessageRepository.findBySenderAndRecipientOrRecipientAndSenderOrderByTimestampAsc(user1, user2,
                user1, user2);
    }

    public List<String> findMyGroupConversations(String username) {
        return chatMessageRepository.findDistinctRoomIdsBySender(username);
    }

    public List<ChatSessionDTO> getMyChatSessions() {
        String email = jwtUtil.getCurrentUserLogin().isPresent() ? jwtUtil.getCurrentUserLogin().get() : "";
        List<String> roomIds = chatMessageRepository.findDistinctRoomIdsBySender(email);
        List<ChatSessionDTO> chatSessions = new ArrayList<>();

        for (String roomId : roomIds) {
            // L·∫•y danh s√°ch ng∆∞·ªùi d√πng kh√°c trong ph√≤ng chat (lo·∫°i tr·ª´ email hi·ªán t·∫°i)
            List<String> otherUsers = chatMessageRepository.findOtherUsersInRoom(roomId, email);
            if (otherUsers.size() != 1) {
                continue; // B·ªè qua n·∫øu kh√¥ng c√≥ ƒë√∫ng 1 ng∆∞·ªùi kh√°c (kh√¥ng ph·∫£i chat 1-1)
            }

            String otherUserEmail = otherUsers.get(0);

            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng kh√°c
            Optional<Profile> otherUserProfileOpt = profileRepository.findByEmail(otherUserEmail);
            if (otherUserProfileOpt.isEmpty()) {
                continue; // B·ªè qua n·∫øu kh√¥ng t√¨m th·∫•y profile
            }

            Profile otherUserProfile = otherUserProfileOpt.get();

            // L·∫•y tin nh·∫Øn cu·ªëi c√πng
            Optional<ChatMessage> lastMessageOpt = chatMessageRepository.findTopByRoomIdOrderByTimestampDesc(roomId);
            if (lastMessageOpt.isEmpty()) {
                continue; // B·ªè qua n·∫øu ch∆∞a c√≥ tin nh·∫Øn
            }

            ChatMessage lastMessage = lastMessageOpt.get();

            ChatSessionDTO sessionDTO = ChatSessionDTO.builder()
                    .id(roomId)
                    .customerName(otherUserProfile.getFullName())
                    .customerEmail(otherUserProfile.getEmail())
                    .avatar(null) // Hi·ªán t·∫°i ch∆∞a c√≥ tr∆∞·ªùng avatar trong Profile
                    .lastMessage(lastMessage.getContent())
                    .lastMessageTime(lastMessage.getTimestamp())
                    .build();

            chatSessions.add(sessionDTO);
        }

        // S·∫Øp x·∫øp c√°c cu·ªôc tr√≤ chuy·ªán theo tin nh·∫Øn cu·ªëi c√πng g·∫ßn nh·∫•t
        chatSessions.sort((s1, s2) -> s2.getLastMessageTime().compareTo(s1.getLastMessageTime()));

        return chatSessions;
    }

    /**
     * Retrieves the most recent chat sessions for the current user, limited to the
     * specified number.
     * 
     * @param limit The maximum number of sessions to return (e.g., 3).
     * @return List of ChatSessionDTO sorted by lastMessageTime descending, limited
     *         to 'limit'.
     */
    public List<ChatSessionDTO> getMyRecentChatSessions(int limit) {
        String email = jwtUtil.getCurrentUserLogin().isPresent() ? jwtUtil.getCurrentUserLogin().get() : "";
        List<String> roomIds = chatMessageRepository.findDistinctRoomIdsBySender(email);
        List<ChatSessionDTO> chatSessions = new ArrayList<>();

        for (String roomId : roomIds) {
            List<String> otherUsers = chatMessageRepository.findOtherUsersInRoom(roomId, email);
            if (otherUsers.size() != 1) {
                continue;
            }

            String otherUserEmail = otherUsers.get(0);
            Optional<Profile> otherUserProfileOpt = profileRepository.findByEmail(otherUserEmail);
            if (otherUserProfileOpt.isEmpty()) {
                continue;
            }

            Profile otherUserProfile = otherUserProfileOpt.get();
            Optional<ChatMessage> lastMessageOpt = chatMessageRepository.findTopByRoomIdOrderByTimestampDesc(roomId);
            if (lastMessageOpt.isEmpty()) {
                continue;
            }

            ChatMessage lastMessage = lastMessageOpt.get();
            ChatSessionDTO sessionDTO = ChatSessionDTO.builder()
                    .id(roomId)
                    .customerName(otherUserProfile.getFullName())
                    .customerEmail(otherUserProfile.getEmail())
                    .avatar(null)
                    .lastMessage(lastMessage.getContent())
                    .lastMessageTime(lastMessage.getTimestamp())
                    .build();

            chatSessions.add(sessionDTO);
        }

        chatSessions.sort((s1, s2) -> s2.getLastMessageTime().compareTo(s1.getLastMessageTime()));
        if (chatSessions.size() > limit) {
            chatSessions = chatSessions.subList(0, limit);
        }

        return chatSessions;
    }

    /**
     * G·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh ri√™ng c·ªßa c√°c ng∆∞·ªùi nh·∫≠n (tr·ª´ ng∆∞·ªùi g·ª≠i).
     */
    private void sendNotificationToRecipients(ChatMessage message, String roomId) {
        // B·ªè qua n·∫øu l√† tin nh·∫Øn h·ªá th·ªëng ho·∫∑c kh√¥ng ph·∫£i CHAT
        if (message.getType() != ChatMessageDTO.MessageType.CHAT) {
            return;
        }

        // T·∫°o DTO th√¥ng b√°o
        String contentPreview = message.getContent().length() > 50
                ? message.getContent().substring(0, 50) + "..."
                : message.getContent();
        ChatNotificationDTO notification = ChatNotificationDTO.builder()
                .roomId(roomId)
                .sender(message.getSender())
                .contentPreview(contentPreview)
                .type(message.getType().toString())
                .timestamp(message.getTimestamp().toString()) // Chuy·ªÉn sang ISO n·∫øu c·∫ßn
                .build();

        // L·∫•y danh s√°ch ng∆∞·ªùi nh·∫≠n (ƒë·ªëi v·ªõi group chat: t·∫•t c·∫£ tr·ª´ sender; private:
        // recipient)
        List<String> recipients = new ArrayList<>();
        if (roomId != null) {
            // Group chat: L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng kh√°c trong ph√≤ng
            recipients = chatMessageRepository.findOtherUsersInRoom(roomId, message.getSender());
        } else if (message.getRecipient() != null) {
            // Private chat: Ch·ªâ recipient
            recipients.add(message.getRecipient());
        }

        // G·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh ri√™ng c·ªßa m·ªói ng∆∞·ªùi nh·∫≠n
        for (String recipient : recipients) {
            messagingTemplate.convertAndSend("/topic/user/" + recipient + "/notifications", notification);
        }
    }
}