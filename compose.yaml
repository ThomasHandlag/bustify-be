# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  # server:
  #   build: .
  #   ports:
  #     - 8080:8080
  #   environment:
  #     - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/busify?createDatabaseIfNotExist=true
  #     - SPRING_DATASOURCE_USERNAME=root
  #     - SPRING_DATASOURCE_PASSWORD=1111
  #     - SPRING_JPA_HIBERNATE_DDL_AUTO=update
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  mysql:
    image: "mysql:latest"
    environment:
      - "MYSQL_DATABASE=busify"
      - "MYSQL_PASSWORD=1111"
      - "MYSQL_ROOT_PASSWORD=1111"
    ports:
      - "3306:3306"
    healthcheck:
      test:
        ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p1111"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  phpmyadmin:
    image: "phpmyadmin:latest"
    ports:
      - "8081:80"
    environment:
      - PMA_HOST=mysql
      - PMA_PORT=3306
    depends_on:
      - mysql
  mongodb:
    image: "mongo:latest"
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=busify
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

